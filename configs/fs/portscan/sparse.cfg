# IDS layers configuration files

# ===============
# GLOBAL SETTINGS
# ===============

[ids]
# train files get parsed with pattern "l[12]-.+" DO NOT put any other option with same pattern
l1 = DATA/train/layer1/training_L1.csv
l2-fastdos = DATA/train/layer2/benign-fastdos.csv
l2-portscan = DATA/train/layer2/benign-portscan.csv
l2-bruteforce = DATA/train/layer2/benign-bruteforce.csv

chunk-size = 10000
max-threads = 4

# "heuristically" chosen value (must come from a probabilistic study on the upper bound of no. of flows usually present in benign communications.
# It should take into consideration the capture time (current "classification window size") and the most probable number of benign flows per communication (2nd module - a view on bulks of flows)
lower-bound-flows=150
log-dir=log


# =============
# LAYER 1 SETUP
# =============

[l1]
classifier-module = sklearn.neighbors
classifier = %(classifier-module)s.KNeighborsClassifier(n_neighbors=5)
feature-selection-module = sklearn.decomposition
feature-selection = %(feature-selection-module)s.PCA(n_components=45)
scaler-module = sklearn.preprocessing
scaler = %(scaler-module)s.StandardScaler()
saved-model-path = saved_neural_networks/layer1
labels=labels-l1
labels-map=mapping-l1

# =============
# LAYER 2 SETUP
# =============
# These must have the same names defined on [ids] section
#	  they also respect the name patter so dont make other sections with same name
# The ammount of layer 2 nodes must be the same as the number of labels in [labels-l1] and their names
#	  after the "l2-" portion must be the same as defined in the section [labels-l1]

[l2-fastdos]
classifier-module = sklearn.neural_network
classifier = %(classifier-module)s.MLPClassifier(
			 activation='logistic',
			 solver='adam',
			 alpha=1e-5,
			 hidden_layer_sizes=(40,20),
			 random_state=1)
feature-selection-module = sklearn.decomposition
feature-selection = %(feature-selection-module)s.PCA(n_components=45)
scaler-module = sklearn.preprocessing
scaler = %(scaler-module)s.StandardScaler()
saved-model-path = saved_neural_networks/layer2
labels=labels-l2
labels-map=mapping-l2

[l2-portscan]
classifier-module = sklearn.tree
classifier = %(classifier-module)s.DecisionTreeClassifier(
		criterion='entropy',
		max_depth=10)
feature-selection-module = sklearn.decomposition
feature-selection = %(feature-selection-module)s.SparsePCA(n_components=30, normalize_components=True, random_state=0)
scaler-module = sklearn.preprocessing
scaler = %(scaler-module)s.StandardScaler()
saved-model-path = saved_neural_networks/layer2
labels=labels-l2
labels-map=mapping-l2
force_train


# known for being really good with RFR (max_depth=4, random_state=0)
[l2-bruteforce]
classifier-module = sklearn.tree
classifier = %(classifier-module)s.DecisionTreeClassifier(
		criterion='entropy',
		max_depth=10)
feature-selection-module = sklearn.decomposition
feature-selection = %(feature-selection-module)s.SparsePCA(n_components=5, normalize_components=True, random_state=0)
scaler-module = sklearn.preprocessing
scaler = %(scaler-module)s.StandardScaler()
saved-model-path = saved_neural_networks/layer2
labels=labels-l2
labels-map=mapping-l2

# =============
#	 LABELS
# =============
# NOTE: order is important and should be the same as layer2 order

[labels-l1]
fastdos
portscan
bruteforce

[labels-l2]
BENIGN
MALIGN

[mapping-l1]
dosgoldeneye = fastdos
doshulk = fastdos
dos = fastdos
ftpbruteforce = bruteforce
sshbruteforce = bruteforce
telnetbruteforce = bruteforce
# TODO FIXME
BENIGN = fastdos
benign = fastdos
unknown = fastdos

[mapping-l2]
dos = MALIGN
portscan = MALIGN
bruteforce = MALIGN
fastdos = MALIGN

dosgoldeneye = MALIGN
doshulk = MALIGN
ftpbruteforce = MALIGN
sshbruteforce = MALIGN
telnetbruteforce = MALIGN
benign = BENIGN
unknown = BENIGN
